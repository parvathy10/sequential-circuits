///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Module: JK_flipflop_tb.sv
// Project: MTech-VLSI-Verilog-SystemVerilog-Practice-Problems
//
// Description:
// This is a test bench of JK flip-flop module designed with asynchronous reset.
// This testbench is intended to guide the reader to quickly force a few values and display the output.
// It is written in SystemVerilog for added flexibility.
// The testbench should be named as 'OriginalModulename_tb.sv or tb_OriginalModulename.sv'
// These are industry standard practices and all students are expected to follow this in all their programs.

// Change history: 23/11/18 - V1.0 Initial working version created (owner: Karthi Balasubramanian)
//                 24/11/18 - V1.1 modified to add stop and finish timing (owner: Karthi Balasubramanian)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

`timescale 1ns/1ps  // Specify simulation timescale

// Testbench (should always be an empty module description)
module JK_flipflop_tb;

// Define testbench internal signals
// It is advised to give the same names as the signals in the main module
reg clk;
reg reset;
reg j;
reg k;
wire q;
wire qbar;

// Instantiate the design under test
JK_flipflop JK_flipflop_test (
  .clk(clk),
  .reset(reset),
  .j(j),
  .k(k),
  .q(q),
  .qbar(qbar)
);

// Generate the test vectors
initial
begin
  clk = 0;
  j = 1'bx;
  k = 1'bx;

  $display("Reset flop.");
  reset = 1;
  show_values; // Call a task (show_values) to wait for 1ns and display the input and outputs

  $display("Release reset.");
  j = 0;
  k = 0;
  reset = 0;
  show_values;

  #7 j = 1;
  #13 j = 0;
  #20 k = 1;
  #30 k = 0;

  $stop;
  $finish;
end

// 'Task' to display the current input and output values
task show_values;
  #1 $display("j:%0h, k:%0h, q:%0h, qb:%0h", j, k, q, qbar);
endtask

always #5ns clk = ~clk; // generate clock of 10 ns time period

endmodule
